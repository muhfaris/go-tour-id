Perintah kontrol alur: for, if, else, switch, dan defer
Belajar cara mengontrol alur kode dengan kondisional, pengulangan, `switch` dan `defer`.

The Go Authors
https://golang.org

* Pengulangan ("for")

Go hanya memiliki satu perintah pengulangan yaitu `for`.

Dasar dari pengulangan `for` yaitu memiliki tiga komponen yang dipisahkan oleh
titik-koma:

- perintah awal: dieksekusi sebelum iterasi pertama
- ekspresi kondisi: dievaluasi sebelum iterasi pertama
- perintah akhir: dieksekusi disetiap akhir iterasi

Perintah awal biasanya berupa deklarasi variabel singkat, dan variabel yang
dideklarasikan tersebut hanya dapat digunakan dalam skop perintah `for`.

Pengulangan akan berhenti saat kondisi bernilai `false`.

_Catatan_: Tidak seperti bahasa C, Java, atau Javascript, tidak ada tanda
kurung yang digunakan menutupi ketiga komponen dari perintah `for` dan tanda
kurung kurawal `{`}` selalu dibutuhkan.

.play flowcontrol/for.go

* Pengulangan lanjutan

Perintah awal dan akhir adalah opsional.

.play flowcontrol/for-continued.go

* Perintah for adalah "while"-nya Go

Dengan cara ini anda bisa menghilangkan perintah awal dan akhir, menggunakan
hanya ekpresi kondisi sehingga `for` menjadi seperti `while` pada bahasa C.

.play flowcontrol/for-is-gos-while.go

* Pengulangan selamanya

Jika anda mengosongkan kondisi maka pengulangan akan berjalan selamanya, dengan
ini pengulangan tanpa henti dapat diekspresikan dengan singkat.

Untuk keluar dari pengulangan anda bisa menggunakan perintah `break` atau
`return` bergantung kepada kondisi yang dibutuhkan pada program.

.play flowcontrol/forever.go

* Kondisi ("if")

Perintah `if` mirip seperti pada C atau Java, kecuali tanda-kurung `(`)` dihilangkan dan tanda `{`}` diharuskan.

.play flowcontrol/if.go

* Kondisi "if" singkat

Seperti pada perintah `for`, perintah `if` bisa diawali dengan perintah
singkat untuk dieksekusi sebelum kondisi.

Variabel yang dideklarasikan pada perintah singkat tersebut hanya berlaku
sampai lingkup kondisi `if` berakhir.

(Coba gunakan `v` di akhir perintah `return`, dan jalankan)

.play flowcontrol/if-with-a-short-statement.go

* Kondisi "if" dan "else"

Variabel yang dideklarasikan dalam perintah singkat `if` juga dapat digunakan
dalam blok `else`.

(Pada contoh, kedua pemanggilan terhadap fungsi `pow` dieksekusi sebelum
`main` memanggil `fmt.Println`.)

.play flowcontrol/if-and-else.go

* Latihan: Pengulangan dan Fungsi

Cara sederhana untuk bermain dengan fungsi dan pengulangan, yaitu dengan
mengimplementasikan fungsi akar kuadrat menggunakan metode Newton.

Pada kasus ini, metode Newton yaitu pendekatan dari `Sqrt(x)` dengan mengambil
titik awal _z_ dan kemudian mengulangnya:

.image /content/img/newton.png

Sebagai permulaan, ulangi perhitungan 10 kali dan lihat seberapa dekat anda
mendapatkan jawaban untuk berbagai nilai (misalnya untuk 1, 2, 3, ...).

Selanjutnya, ubah kondisi pengulangan untuk berhenti saat nilainya sudah tidak
berubah lagi (atau hanya berubah dengan delta yang sangat kecil).
Lihat apakah iterasinya lebih sedikit atau lebih banyak.
Seberapa dekat hasil anda dengan nilai
[[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] ?

Petunjuk: untuk mendeklarasikan dan menginisialisasi nilai _floating_point_,
gunakan sintaks _floating_point_ atau konversi:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Perintah "switch"

Anda mungkin sudah tahu seperti apa perintah `switch`.

Bagian `case` secara otomatis mengeluarkan dari blok kondisi, kecuali berakhir
dengan perintah `fallthrough`.

.play flowcontrol/switch.go

* Urutan evaluasi "switch"

Kondisi pada `switch` dievaluasi dari atas ke bawah, berhenti saat sebuah
kondisi sukses.

Sebagai contoh,

	switch i {
	case 0:
	case f():
	}

tidak akan memanggil fungsi `f` jika `i==0`.

#appengine: *Catatan:* waktu dalam Go playground selalu berawal dari
#appengine: 2009-11-10 23:00:00 UTC, sebuah nilai yang maknanya bisa dicari
#appengine: oleh pembaca.

.play flowcontrol/switch-evaluation-order.go

* Perintah "switch" tanpa kondisi

Perintah `switch` tanpa sebuah kondisi sama seperti `switch`true`.

Konstruksi ini merupakan cara yang bersih untuk menulis rantaian
`if-then-else` yang panjang.

.play flowcontrol/switch-with-no-condition.go

* Perintah "defer"

Perintah `defer` menunda eksekusi dari sebuah fungsi sampai fungsi yang
melingkupinya selesai.

Argumen untuk pemanggilan `defer` dievaluasi langsung, tapi pemanggilan fungsi
tidak dieksekusi sampai fungsi yang melingkupinya selesai.

.play flowcontrol/defer.go

* Penundaan bertumpuk

Fungsi yang dipanggil dengan `defer` di- _push_ ke sebuah _stack_.
Saat fungsi berakhir, panggilan yang tadi ditunda dieksekusi dengan urutan
last-in-first-out (yang terakhir masuk menjadi pertama keluar).

Untuk belajar lebih lanjut tentang perintah `defer` bacalah
[[https://blog.golang.org/defer-panic-and-recover][artikel berikut]].

.play flowcontrol/defer-multi.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan dengan
[[javascript:click(".next-page")][pelajaran selanjutnya]].
