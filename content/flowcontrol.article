Perintah kontrol alur: for, if, else, switch, dan defer
Belajar cara mengontrol alur kode dengan kondisional, pengulangan, `switch` dan `defer`.

The Go Authors
https://golang.org

* Pengulangan ("for")

Go hanya memiliki satu konstruk pengulangan, yaitu `for`.

Dasar dari pengulangan `for` seperti pada C atau Java, kecuali tanda kurung `(`)` dihilangkan (bahkan bukan opsional) dan tanda `{`}` diharuskan.

.play flowcontrol/for.go

* Pengulangan lanjutan

Seperti pada C atau Java, anda bisa mengosongkan perintah awal dan akhir pada `for`.

.play flowcontrol/for-continued.go

* For adalah Go-nya "while"

Dengan cara ini anda bisa menghilangkan titik-koma: `while` nya C dieja dengan `for` pada Go.

.play flowcontrol/for-is-gos-while.go

* Pengulangan selamanya

Jika anda mengosongkan kondisi maka pengulangan akan berjalan selamanya, dengan ini pengulangan tanpa henti dapat diekspresikan dengan singkat.

.play flowcontrol/forever.go

* Kondisi ("if")

Perintah `if` mirip seperti pada C atau Java, kecuali tanda-kurung `(`)` dihilangkan dan tanda `{`}` diharuskan.

.play flowcontrol/if.go

* Kondisi "if" singkat

Seperti pada `for`, perintah `if` bisa diawali dengan perintah singkat untuk dieksekusi sebelum kondisi.

Variabel yang dideklarasikan pada perintah singkat tersebut hanya berlaku sampai lingkup sampai kondisi `if` berakhir.

(Coba gunakan `v` di akhir perintah `return`.)

.play flowcontrol/if-with-a-short-statement.go

* Kondisi "if" dan "else"

Variabel yang dideklarasikan dalam perintah singkat `if` juga dapat digunakan dalam blok `else`.

(Kedua pemanggilan terhadap `pow` dieksekusi sebelum pemanggilan `main` terhadap `fmt.Println` dilakukan.)

.play flowcontrol/if-and-else.go

* Latihan: Pengulangan dan Fungsi

Cara sederhana untuk bermain dengan fungsi dan pengulangan, implementasikan fungsi akar kuadrat menggunakan metode Newton.

Pada kasus ini, metode Newton yaitu pendekatan dari `Sqrt(x)` dengan mengambil titik awal _z_ dan kemudian mengulangnya:

.image /content/img/newton.png

Untuk memulai, ulangi perhitungan 10 kali dan lihat seberapa dekat anda mendapatkan jawabannya untuk berbagai nilai (1, 2, 3, ...).

Selanjutnya, ubah kondisi pengulangan untuk berhenti saat nilainya sudah tidak berubah lagi (atau hanya berubah dengan delta yang sangat kecil).
Lihat apakah iterasinya lebih sedikit atau banyak.
Seberapa dekat hasil anda dengan nilai
[[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] ?

Petunjuk: untuk mendeklarasikan dan menginisialisasi nilai _floating_point_, gunakan sintaks _floating_point_ atau konversi:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Perintah "switch"

Anda mungkin sudah tahu seperti apa perintah `switch`.

Bagian `case` secara otomatis mengeluarkan dari blok kondisi, kecuali berakhir dengan perintah `fallthrough`.

.play flowcontrol/switch.go

* Urutan evaluasi "switch"

Kondisi pada `switch` dievaluasi dari atas ke bawah, berhenti saat sebuah kondisi sukses.

Sebagai contoh,

	switch i {
	case 0:
	case f():
	}

tidak akan memanggil fungsi `f` jika `i==0`.

#appengine: *Catatan:* waktu dalam Go playground selalu berawal dari 2009-11-10 23:00:00 UTC, sebuah nilai yang makna bisa dicari oleh pembaca.

.play flowcontrol/switch-evaluation-order.go

* Perintah "switch" tanpa kondisi

Perintah `switch` tanpa sebuah kondisi sama seperti `switch`true`.

Konstruksi ini merupakan cara yang bersih untuk menulis rantaian if-then-else yang panjang.

.play flowcontrol/switch-with-no-condition.go

* Perintah "defer"

Perintah `defer` menunda eksekusi dari sebuah fungsi sampai fungsi yang melingkupinya selesai.

Argumen untuk pemanggilan `defer` dievaluasi langsung, tapi pemanggilan fungsi tidak dieksekusi sampai fungsi yang melingkupinya selesai.

.play flowcontrol/defer.go

* Penundaan bertumpuk

Fungsi yang dipanggil dengan `defer` di- _push_ ke sebuah _stack_.
Saat fungsi berakhir, panggilan yang tadi ditunda dieksekusi dengan urutan last-in-first-out (yang terakhir masuk menjadi pertama keluar).

Untuk belajar lebih lanjut tentang perintah `defer` bacalah
[[https://blog.golang.org/defer-panic-and-recover][artikel berikut]].

.play flowcontrol/defer-multi.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan dengan
[[javascript:click(".next-page")][pelajaran selanjutnya]].
