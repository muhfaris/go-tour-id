Method dan Interface
Pelajaran ini membahas method dan interface, konstruksi yang membuat objek dan perilakunya.

The Go Authors
https://golang.org

* Method

Go tidak memiliki class.
Namun, anda bisa mendefinisikan method pada tipe.

Sebuah method adalah fungsi dengan sebuah argumen khusus: _receiver_.

Receiver berada antara kata `func` dan nama method.

Pada contoh berikut method `Abs` memiliki _receiver_ bertipe `Vertex` dengan
nama `v`.

.play methods/methods.go

* Method adalah fungsi

Ingat: sebuah method hanyalah fungsi dengan sebuah argumen _receiver_.

Pada contoh berikut `Abs` dibuat sebagai fungsi biasa tanpa ada perubahan
fungsionalitas.

.play methods/methods-funcs.go

* Method lanjutan

Anda bisa mendeklarasikan method pada type yang bukan _struct_ juga.

Pada contoh berikut dapat dilihat sebuah tipe numerik `MyFloat` dengan method
`Abs`.

Anda hanya bisa mendeklarasikan sebuah method dengan _receiver_ yang tipenya
telah terdefinisi di _package_ yang sama dengan method-nya.
Anda tidak bisa mendeklarasikan sebuah method dengan _receiver_ yang tipenya
didefinisikan di _package_ yang lain (termasuk tipe _built-in_ seperti `int`).

.play methods/methods-continued.go

* Pointer-receiver

Anda bisa membuat method dengan _pointer_ ke receiver.

Ini berarti tipe _receiver_ memiliki sintaks `*T` untuk tipe `T`.

Sebagai contohnya, method `Scale` berikut didefinisikan untuk tipe `*Vertex`.

Method dengan _pointer-receiver_ dapat mengubah nilai yang ditunjuk (seperti
yang dilakukan oleh `Scale`).
Karena method terkadang perlu mengubah _receiver_ nya, _pointer-receiver_ lebih
umum digunakan daripada _receiver_ dengan value.

Coba hapus `*` dari deklarasi fungsi `Scale` pada baris 16 dan perhatikan
bagaimana perilaku program berubah.

Dengan value-receiver, method `Scale` beroperasi terhadap salinan dari nilai
asli `Vertex`.
(Perilaku ini sama dengan argumen pada fungsi.)
Method `Scale` harus memiliki _pointer-receiver_ untuk mengubah nilai `Vertex`
yang dideklarasikan di fungsi `main`.

.play methods/methods-pointers.go

* Pointer dan fungsi

Di sini kita lihat method `Abs` dan `Scale` dibuat ulang sebagai fungsi.

Sekali lagi, coba hilangkan `*` pada baris 16.
Bisakah anda melihat perubahan perilakunya?
Apa yang harus anda ubah selanjutnya supaya contoh tersebut dapat di _compile_?

(Jika anda tidak yakin, lanjutnya ke tahap berikutnya.)

.play methods/methods-pointers-explained.go

* Method dan pointer tidak langsung

Bandingkan dua program sebelumnya, anda mungkin memperhatikan bahwa fungsi
dengan sebuah argumen _pointer_ harus menerima sebuah _pointer_:

	var V Vertex
	ScaleFunc(v)  // Compile error!
	ScaleFunc(&v) // OK

Sementara method dengan _pointer-receiver_ dapat menerima sebuah nilai atau
sebuah _pointer_ sebagai _receiver_ saat dipanggil:

	var v Vertex
	v.Scale(5)   // OK
	p := &v
	p.Scale(10)  // OK

Untuk perintah `v.Scale(5)`, walaupun `v` adalah sebuah nilai bukan sebuah
_pointer_, method dengan _pointer-receiver_ akan dipanggil secara otomatis.
Maka, untuk mempermudah, Go menginterpretasikan perintah `v.Scale(5)` sebagai
`(&v).Scale(5)` karena method `Scale` memiliki _pointer-receiver_.

.play methods/indirection.go

* Method dan pointer tidak langsung (2)

Hal yang sama berlaku sebaliknya.

Fungsi yang menerima argumen nilai harus mendapatkan sebuah nilai dari tipe
yang spesifik:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Compile error!

Sementara method dengan value-receiver bisa menerima sebuah nilai atau sebuah
_pointer_ sebagai _receiver_ saat dipanggil:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

Pada kasus ini, pemanggilan method `p.Abs()` diinterpretasikan sebagai
`(*p).Abs()`.

.play methods/indirection-values.go

* Memilih receiver nilai atau pointer

Ada dua alasan kenapa menggunakan _pointer-receiver_.

Pertama adalah supaya method dapat mengubah nilai yang ditunjuk oleh receiver.

Kedua adalah untuk menghindari menyalin nilai setiap kali method dipanggil.
Hal ini bisa lebih efisien jika _receiver_ adalah sebuah _struct_ yang besar,
misalnya.

Pada contoh ini, `Scale` dan `Abs` memiliki tipe receiver `*Vertex`, walaupun
method `Abs` tidak perlu mengubah receiver-nya.

Secara umum, semua method dari sebuah tipe harus memiliki receiver sebagai
nilai atau sebagai _pointer_, tapi tidak gabungan dari keduanya.
(Kita akan lihat alasannya pada beberapa laman berikutnya.)

.play methods/methods-with-pointer-receivers.go

* Interface

Sebuah tipe interface didefinisikan oleh sekumpulan method.

Nilai dari tipe interface dapat menyimpan nilai apapun yang mengimplementasikan method tersebut.

*Catatan:* Terdapat kesalahan di contoh kode pada baris 22.
`Vertex` (tipe nilai) tidak memenuhi `Abser` karena method `Abs` hanya didefinisikan pada `*Vertex` (tipe _pointer_).

.play methods/interfaces.go

* Interface dipenuhi secara implisit

Sebuah tipe mengimplementasikan sebuah interface dengan mengimplementasikan method-methodnya.
Tidak ada deklarasi eksplisit; tidak ada perintah "implements".

Interface implisit memisahkan implementasi paket dari paket yang mendefinisikan interface tersebut: keduanya tidak memiliki kebergantungan.

Hal ini mendorong ketepatan pendefinisian interface, karena anda tidak perlu mencari setiap implementasi dan menandainya dengan nama interface yang baru.

[[https://golang.org/pkg/io/][Paket io]]
telah mendefinisikan `Reader` dan `Writer`; anda tidak perlu menambahkannya.

.play methods/interfaces-are-satisfied-implicitly.go

* Stringer

Interface yang ada dimanapun yaitu
[[//golang.org/pkg/fmt/#Stringer][`Stringer`]]
didefinisikan oleh paket
[[//golang.org/pkg/fmt/][`fmt`]].

	type Stringer interface {
		String() string
	}

Sebuah `Stringer` adalah suatu tipe yang mendeskripsikan dirinya sendiri sebagai string.
Paket `fmt` (dan banyak lainnya) menggunakan interface ini untuk mencetak nilai.

.play methods/stringer.go

* Latihan: Stringer

Buat tipe `IPAddr` yang mengimplementasikan `fmt.Stringer` untuk mencetak alamat dengan empat tanda titik.

Misalnya, `IPAddr{1,`2,`3,`4}` mengeluarkan `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Error

Program Go mengekspresikan keadaan error dengan nilai `error`.

Tipe `error` adalah interface buatan mirip dengan `fmt.Stringer`:

	type error interface {
		Error() string
	}

Seperti dengan `fmt.Stringer`, paket `fmt` mencari interface `error` saat mencetak nilai.

Fungsi terkadang mengembalikan nilai `error`, dan kode yang memanggilnya harus menangani error dengan memeriksa apakah error bernilai `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

`error` yang nil menandakan sukses; `error` yang bukan-nil menandakan adanya kesalahan.

.play methods/errors.go

* Latihan: Error

Salin fungsi `Sqrt` anda dari
[[/flowcontrol/8][latihan sebelumnya]]
dan ubah untuk mengembalikan nilai `error`.

`Sqrt` seharusnya mengembalikan nilai error bukan-nil saat diberikan angka negatif, karena tidak mendukung bilangan kompleks.

Buatlah tipe baru

	type ErrNegativeSqrt float64

dan buat dia sebagai `error` dengan memberikan method

	func (e ErrNegativeSqrt) Error() string

sehingga `ErrNegativeSqrt(-2).Error()` mengembalikan `"cannot`Sqrt`negative`number:`-2"`.

*Catatan:* pemanggilan `fmt.Sprint(e)` di dalam method `Error` akan membuat program berulang tak henti.
Anda dapat menghindari hal tersebut dengan mengkonversi `e`: `fmt.Sprint(float64(e))`.
_Kenapa?_

Ubah fungsi `Sqrt` mengembalikan nilai `ErrNegativeSqrt` saat diberikan nilai negatif.

.play methods/exercise-errors.go

* Reader

Paket `io` memiliki spesifikasi interface `io.Reader`, yang merepresentasikan berakhirnya pembacaan sebuah aliran data.

Standar pustaka Go memiliki
[[https://golang.org/search?q=Read#Global][banyak implementasi]]
dari interface tersebut, termasuk berkas, koneksi jaringan, kompresi, cipher, dll.

Interface `io.Reader` memiliki method `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` mengisi parameter slice byte dengan data dan mengembalikan jumlah byte yang diisi dan nilai errornya.
Ia mengembalikan error `io.EOF` saat aliran data berakhir.

Contoh kode membuat sebuah 
[[//golang.org/pkg/strings/#Reader][`strings.Reader`]]
dan memproses 8 bytes keluarannya.

.play methods/reader.go

* Latihan: Reader

Implementasikan sebuah tipe `Reader` yang menghilangkan karakter ASCII `'A'` yang panjang.

.play methods/exercise-reader.go

* Latihan: rot13Reader

Pola umumnya adalah sebuah
[[https://golang.org/pkg/io/#Reader][io.Reader]]
yang membungkus `io.Reader` lainnya, memodifikasi aliran data dengan cara tertentu.

Sebagai contohnya, fungsi 
[[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]]
mengambil `io.Reader` (aliran data terkompres) dan mengembalikan `*gzip.Reader` yang juga mengimplementasikan `io.Reader` (aliran data tak-terkompres).

Implementasikan `rot13Reader` yang mengimplementasikan `io.Reader` dengan membaca dari `io.Reader`, modifikasi aliran data dengan menerapkan penyandian
[[https://en.wikipedia.org/wiki/ROT13][rot13]]
terhadap semua karakter alfabet.

Tipe `rot13Reader` telah disediakan untuk anda.
Buatlah ia menjadi `io.Reader` dengan mengimplementasikan method `Read`.

.play methods/exercise-rot-reader.go

* Server Web

[[https://golang.org/pkg/net/https/][Paket https]]
menyediakan permintaan HTTP menggunakan nilai apapun yang mengimplementasikan `http.Handler`:

	package https

	type Handler interface {
		ServeHTTP(w ResponseWriter, r *Request)
	}

Pada contoh berikut, tipe `Hello` mengimplementasikan `http.Handler`.

Buka
[[http://localhost:4000/][http://localhost:4000/]]
untuk melihat hasilnya.

#appengine: *Catatan:* Contoh ini tidak akan berjalan lewat antarmuka tur berbasis web.
#appengine: Untuk mencoba server web anda harus
#appengine: [[https://golang.org/doc/install/][memasang Go]].

.play methods/web-servers.go

* Latihan: HTTP Handlers

Implementasikan tipe berikut dan definisikan fungsi `ServeHTTP`.
Registrasikan mereka supaya dapat menangani _path_ tertentu di dalam server web anda.

	type String string

	type Struct struct {
		Greeting string
		Punct    string
		Who      string
	}

Sebagai contohnya, anda bisa meregister _handler_ menggunakan:

	http.Handle("/string", String("I'm a frayed knot."))
	http.Handle("/struct", &Struct{"Hello", ":", "Gophers!"})

Setelah menjalankan server anda sendiri, anda dapat mengunjungi
[[http://localhost:4000/string][http://localhost:4000/string]] dan
[[http://localhost:4000/string][http://localhost:4000/struct]].

Untuk rincian lebih lanjut tentang fungsi `http.Handle`, lihat
[[https://golang.org/pkg/net/http/#Handle][dokumentasinya]].

#appengine: *Catatan:* Contoh ini tidak akan berjalan lewat antarmuka tur berbasis web.
#appengine: Untuk mencoba server web anda harus
#appengine: [[https://golang.org/doc/install/][memasang Go]].

.play methods/exercise-http-handlers.go

* Gambar

[[https://golang.org/pkg/image/#Image][Paket image]]
mendefinisikan interface `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Catatan*: Nilai kembalian `Rectangle` dari method `Bounds` sebenarnya adalah deklarasi
[[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]]
yang telah ada di dalam paket `image`.

(Lihat
[[https://golang.org/pkg/image/#Image][dokumentasi untuk paket Image]]
untuk lebih jelas.)

Tipe `color.Color` dan `color.Model` juga interface, tapi kita akan menggunakan implementasi `color.RGBA` dan `color.RGBAModel`.
Interface dan tipe tersebut dispesifikasikan oleh 
[[https://golang.org/pkg/image/color/][paket image/color]].

.play methods/images.go

* Latihan: Gambar

Ingat generator gambar yang anda buat sebelumnya?
Mari kita buat satu lagi, tapi kali ini mengembalikan implementasi dari `image.Image` bukan sebuah slice dari data.

Definisikan tipe `Image` anda sendiri, kemudian implementasikan
[[https://golang.org/pkg/image/#Image][method-method yang dibutuhkan]]
, dan panggil `pic.ShowImage`.

`Bounds` seharusnya mengembalikan `image.Rectangle`, seperti `image.Rect(0,`0,`w,`h)`.

`ColorModel` seharusnya mengembalikan `color.RGBAModel`.

`At` seharusnya mengembalikan sebuah warna;
nilai `v` pada generator gambar berkoresponden dengan `color.RGBA{v,`v,`255,`255}`.

.play methods/exercise-images.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan dengan
[[javascript:click(".next-page")][pelajaran selanjutnya]].
