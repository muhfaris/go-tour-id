Tipe lanjut: struct, slice, dan map.
Belajar cara mendefinisikan tipe: pelajaran ini membahas struct, array, slice, dan map.

The Go Authors
https://golang.org

* Pointer

Go memiliki pointer.
Sebuah pointer menyimpan alamat dari sebuah variabel.

Tipe `*T` adalah pointer ke sebuah nilai `T`.
Nilai kosongnya adalah `nil`.

	var p *int

Operator `&` mengembalikan operan pointer dari variabel.

	i := 42
	p = &i

Operator `*` mengembalikan nilai yang ditunjuk oleh pointer.

	fmt.Println(*p) // baca nilai i lewat pointer p
	*p = 21         // set nilai i lewat pointer p

Cara ini disebut dengan "dereferencing" atau "indirecting".

Tidak seperti C, Go tidak memiliki fungsi aritmatika pada pointer.

.play moretypes/pointers.go

* Tipe data abstrak "struct"

Sebuah `struct` adalah kumpulan dari berbagai variabel.

.play moretypes/structs.go

* Bagian dari struct

Bagian dari struct diakses menggunakan sebuah titik.

.play moretypes/struct-fields.go

* Pointer ke struct

Bagian dari struct juga bisa diakses lewat pointer ke struct.

.play moretypes/struct-pointers.go

* Inisialisasi struct

Sebuah `struct` bisa dibuat dengan mengisinya dengan nilai bagian-bagiannya.

Anda juga bisa mengisi hanya sebagian dari kolom dengan menggunakan sintaks `Name:` (urutan dari bagian-bagiannya tidak berpengaruh).

Prefik `&` mengembalikan sebuah pointer ke `struct`.

.play moretypes/struct-literals.go

* Array

Deklarasi tipe dengan `[n]T` adalah untuk array dengan jumlah `n` dan bertipe `T`.

Ekspresi

	var a [10]int

mendeklarasikan sebuah variabel `a` sebagai sebuah array dari sepuluh integer.

Panjang sebuah array adalah bagian dari tipenya, jadi array tidak bisa diubah ukurannya.
Hal ini sepertinya membatasi, tapi jangan khawatir;
Go menyediakan cara yang mudah untuk bekerja dengan array.

.play moretypes/array.go

* Potongan ("slice")

Sebuah _slice_ mengacu pada sebuah nilai array dan juga mengikutkan panjangnya.

`[]T` adalah sebuah slice dengan elemen bertipe `T`.

`len(primes)` mengembalikan panjang dari slice `primes`.

.play moretypes/slices.go

* Slices berisi Slices

_Slices_ bisa mengandung tipe apapun, termasuk _slices_ juga.

.play moretypes/slices-of-slice.go

* Memotong "slice"

Slice bisa dipotong lagi, menghasilkan nilai potongan baru yang mengacu ke array yang sama.

Ekspresi

	s[lo:hi]

mengevaluasi ke potongan dari elemen `lo` sampai `hi-1`, secara inklusif.
Maka

	s[lo:lo]

adalah kosong dan

	s[lo:lo+1]

hanya memiliki satu elemen.

.play moretypes/slicing-slices.go

* Membuat potongan

Potongan dibuat dengan fungsi `make`.
Ia bekerja dengan mengalokasikan array kosong dan mengembalikan potongan yang mengacu pada array tersebut:

	a := make([]int, 5)  // len(a)=5

Untuk menentukan kapasitasnya, tambahkan argumen ketiga pada `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go

* Slice yang Nil

Nilai kosong dari sebuah slice adalah `nil`.

Slice yang nil memiliki panjang dan kapasitas 0.

.play moretypes/nil-slices.go

* Menambahkan elemen ke slice

Sangat umum untuk menambahkan elemen ke slice, sehingga Go menyediakan fungsi `append`.
[[https://golang.org/pkg/builtin/#append][Dokumentasinya]]
menjelaskan lebih lanjut dari fungsi `append`.

	func append(s []T, vs ...T) []T

Parameter pertama `s` dari `append` adalah sebuah slice dengan tipe `T`, dan sisanya adalah nilai `T` yang akan ditambahkan ke slice.

Hasil dari `append` yaitu sebuah slice yang berisi semua elemen dari slice awal berikut dengan nilai yang ditambahkan.

Jika array awal `s` terlalu kecil untuk nilai yang ditambahkan, maka array yang lebih besar akan dialokasikan.
Kembaliannya yaitu slice yang merujuk ke array yang baru dialokasikan.

Untuk belajar lebih lanjut tentang slice, bacalah artikel
[[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]].

.play moretypes/append.go

* Rentang ("range")

Perintah `range` pada pengulangan `for` mengiterasi sebuah slice atau map.

Saat melakukan pengulangan pada sebuah slice, dua nilai akan dikembalikan untuk setiap iterasi.
Nilai yang pertama yaitu indeks, dan yang kedua yaitu salinan dari elemen pada indeks tersebut.

.play moretypes/range.go

* Rentang lanjutan

Anda bisa melewati indeks atau nilai pada iterasi dengan memberikan operan `_`.

Jika anda hanya menginginkan indeks saja, hapus seluruh bagian ", value".

.play moretypes/range-continued.go

* Latihan: Slice

Implementasikan `Pic`.
Fungsi tersebut harus mengembalikan sebuah slice dengan panjang `dy`, setiap elemennya merupakan sebuah slice `dx` 8-bit unsigned integer.
Saat anda menjalankan program, ia akan menampilkan gambar anda, mengiterpretasikan nilai integer dengan warna abu-abu.

Pilihan gambarnya terserah anda.
Fungsi menarik yang bisa diikutkan berupa `(x+y)/2`, `x*y`, dan `x^y`.

Petunjuk:

- Anda membutuhkan penggunaan sebuah pengulangan untuk mengalokasi `[]uint8` di dalam `[][]uint8`.

- Gunakan `uint8(intValue)` untuk mengkonversi antara tipe.

.play moretypes/exercise-slices.go

* Map

Sebuah map memetakan sebuah kunci (_key_) dengan nilainya.

Map harus dibuat dengan `make` sebelum dapat digunakan;
map yang `nil` adalah kosong dan tidak dapat diisi.

.play moretypes/maps.go

* Penggunaan Map

Penggunaan map seperti pada penggunaan struct, tapi dengan membubuhkan key-nya.

.play moretypes/map-literals.go

* Penggunaan map lanjutan

Jika level teratas dari tipe hanya nama tipe, anda bisa menghilangkannya dari inisialisasi elemen map.

.play moretypes/map-literals-continued.go

* Operasi map

Pengisian atau mengubah elemen dalam map `m`:

	m[key] = elem

Mengambil elemen:

	elem = m[key]

Menghapus elemen:

	delete(m, key)

Menguji apakah sebuah key ada dalam map:

	elem, ok = m[key]

Jika `key` ada dalam `m`, `ok` bernilai `true`.
Jika `key` tidak ada dalam map, maka `elem` akan bernilai kosong bergantung kepada tipe elemen pada map.

_Catatan_: jika `elem` atau `ok` belum dideklarasikan anda bisa menggunakan bentuk deklarasi singkat berikut:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Latihan: map

Implementasikan `WordCount`.
Fungsi tersebut mengembalikan sebuah map dari penghitungan setiap "kata" di dalam string `s`.
Fungsi `wc.Test` menjalankan pengujian terhadap fungsi yang diberikan dan mencetak sukses atau salah.

Anda mungkin menemukan artikel
[[https://golang.org/pkg/strings/#Fields][strings.Fields]]
membantu anda.

.play moretypes/exercise-maps.go

* Nilai Fungsi

Fungsi adalah suatu nilai juga.
Fungsi dapat digunakan seperti nilai yang lain.

Nilai fungsi dapat digunakan pada argumen di fungsi yang lain dan sebagai kembalian.

.play moretypes/function-values.go

* Fungsi closure

Fungsi pada Go bisa _closure_.
_Closure_ adalah sebuah nilai fungsi yang merujuk variabel dari blok fungsinya.
Fungsi closure bisa mengakses dan mengisi variabel yang dirujuk;
dalam artian fungsi tersebut "terikat" ke variabel.

Sebagai contohnya, fungsi `adder` mengembalikan sebuah closure.
Setiap closure terikat dengan variabel `sum` -nya sendiri.

.play moretypes/function-closures.go

* Latihan: Fibonacci dengan closure

Mari bermain dengan fungsi.

Implementasikan sebuah fungsi `fibonacci` yang mengembalikan sebuah fungsi
(closure) yang mengembalikan
[[https://id.wikipedia.org/wiki/Bilangan_Fibonacci][bilangan fibonacci]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Selamat!

Anda telah menyelesaikan pelajaran ini!

Anda bisa kembali ke daftar
[[/list][modul]]
untuk melihat apa yang bisa dipelajari selanjutnya, atau meneruskan dengan
[[javascript:click(".next-page")][pelajaran selanjutnya]].
